package com.oop.collections.mylist;
public class MyLinkedList extends MyAbstractList {
    MyLinkedListNode head;
    int size;

    public MyLinkedList() {
        head = null;
        size = 0;
    }

    private MyLinkedListNode getNodeByIndex(int index) {
        MyLinkedListNode current = head;
        for (int i = 0; i < index; i++) {
            current = current.getNext();
        }
        return current;
    }

    @Override
    public void add(Object o) {
        add(o, size);
    }

    @Override
    public void add(Object o, int index) {
        checkBoundaries(index, size);
        if (index == 0) {
            MyLinkedListNode newNode = new MyLinkedListNode(o);
            newNode.next = head;
            head = newNode;
        } else {
            // index - 1 cuz parametered index could be size at add(Object o) method
            MyLinkedListNode current = getNodeByIndex(index - 1);
            MyLinkedListNode newNode = new MyLinkedListNode(o);
            current.setNext(newNode);
        }
        size++;
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public Object get(int index) {
        checkBoundaries(index, size);
        MyLinkedListNode current = getNodeByIndex(index);
        return current.getPayload();
    }

    @Override
    public void remove(int index) {
        checkBoundaries(index, size);
        if (index == 0) {
            head = head.getNext();
        } else {
            MyLinkedListNode forward = getNodeByIndex(index - 1);
            forward.setNext(forward.getNext().getNext());
        }
        size--;
    }

}
