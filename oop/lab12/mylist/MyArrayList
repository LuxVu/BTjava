package hus.oop.mylist;

public class MyArrayList extends hus.oop.mylist.MyAbstractList {
    private static final int DEFAULT_CAPACITY = 2;
    private Object[] data;
    private int size;

    /**
     * Khởi tạo dữ liệu mặc định.
     */
    public MyArrayList() {
        /* TODO */
        this.data = new Object[DEFAULT_CAPACITY];
        size = 0;
    }

    /**
     * Lấy kích thước của list.
     * @return
     */
    @Override
    public int size() {
        /* TODO */
        return this.size;
    }

    /**
     * Lấy phần tử ở vị trí index trong list.
     * @param index
     * @return
     */
    @Override
    public Object get(int index) {
        /* TODO */
        if (index < 0 || index >= size()) {
            throw new IndexOutOfBoundsException("Index out of bounds.");
        }
        return data[index];
    }
    /**
     * Xóa phần tử ở vị trí index trong list.
     * @param index
     */
    @Override
    public void remove(int index) {
        /* TODO */
        if (index < 0 || index >= size()) {
            throw new IndexOutOfBoundsException("Index out of bounds.");
        } else {
            Object[] newData = new Object[size()];
            System.arraycopy(data, 0, newData, 0, index++);
            System.arraycopy(data, index, newData, index - 1, size() - (index + 1));
            this.data = newData;
            size--;
        }
    }

    /**
     * Thêm phần tử có dữ liệu payload vào cuối list.
     * Nếu danh sách hết chỗ, cấp phát thêm gấp đôi chỗ cho list.
     * @param payload
     */
    @Override
    public void append(Object payload) {
        /* TODO */
        insert(payload, size());
    }

    /**
     * Thêm phần tử có dữ liệu payload vào list ở vị trí index.
     * Nếu list hết chỗ, cấp phát thêm gấp đôi chỗ cho list.
     * @param payload
     * @param index
     */
    @Override
    public void insert(Object payload, int index) {
        /* TODO */
        if (index < 0 || index > size()) {
            throw new IndexOutOfBoundsException("Index out of bounds.");
        } else {
            if (size() == data.length) {
                enlarge();
            }
            Object[] newData = new Object[size() + 1];
            System.arraycopy(data, 0, newData, 0, index);
            newData[index] = payload;
            System.arraycopy(data, index, newData, index + 1, size() - index);
            size++;
        }
    }

    /**
     * Tạo iterator để có thể duyệt qua các phần tử của list.
     * @return
     */
    @Override
    public hus.oop.mylist.MyIterator iterator() {
        /* TODO */
        return new hus.oop.mylist.MyArrayListIterator(data);
    }

    /**
     * Cấp phát gấp đôi chỗ cho list khi cần thiết.
     */
    private void enlarge() {
        /* TODO */
        Object[] newData = new Object [data.length * 2];
        System.arraycopy(data, 0, newData, 0, size());
        this.data = newData;
    }

    public void setData(Object[] data) {
        this.data = data;
    }
}
